#!/bin/sh
# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

umask 022
mkdir -p -m 0711 "${LOCKBOX_CACHE_DIR}"

# Look for the existing install attributes.
# If there's any, move them to new path.
# Note: this whole process is kept as much fault-tolerant as possible.
if [ -s $OLD_INSTALL_ATTRS_FILE ]; then
  if [ ! -s $NEW_INSTALL_ATTRS_FILE ]; then
    echo "Migrating install attributes"
    # First, create a copy to the new location, then rename it.
    # If the copy/rename operation somehow gets interrupted (sudden
    # reboot), the old install_attributes.pb file will still be there at
    # the next reboot.
    # So, it will reach this step again and eventually continue from here.
    mkdir -p $INSTALL_ATTRS_NEW_PATH
    sync
    cp $OLD_INSTALL_ATTRS_FILE $COPY_INSTALL_ATTRS_FILE
    sync
    mv $COPY_INSTALL_ATTRS_FILE $NEW_INSTALL_ATTRS_FILE
    sync
  fi
fi

# If we are using TPM2.0 simulator, use tpm_manager to read the NV space.
if initctl status trunksd; then
  /usr/bin/gdbus wait --system -t 15 org.chromium.TpmManager
  tpm_manager_client read_space --index=0x800004 \
                                --file="${LOCKBOX_NVRAM_FILE}"
  # If the nvram file is not empty
  if [ -s "${LOCKBOX_NVRAM_FILE}" ]; then
    lockbox-cache --cache="${INSTALL_ATTRS_CACHE}" \
                  --nvram="${LOCKBOX_NVRAM_FILE}" \
                  --lockbox="${NEW_INSTALL_ATTRS_FILE}"
  fi
  # There are no other consumers; remove the nvram data
  rm "${LOCKBOX_NVRAM_FILE}"
# In other cases, pretend like lockbox is supported.
else
  if [ -f "${NEW_INSTALL_ATTRS_FILE}" ]; then
    cp "${NEW_INSTALL_ATTRS_FILE}" "${INSTALL_ATTRS_CACHE}"
  fi
fi
