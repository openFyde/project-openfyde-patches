diff --git a/cros/fydeos_toggle_ota.cc b/cros/fydeos_toggle_ota.cc
index 92b9f3b139a0..51e2a79f00f7 100644
--- a/cros/fydeos_toggle_ota.cc
+++ b/cros/fydeos_toggle_ota.cc
@@ -2,6 +2,10 @@
 #include <base/files/file_util.h>
 
 #include "update_engine/common/subprocess.h"
+#include <base/json/json_reader.h>
+#include <base/logging.h>
+#include <map>
+#include <vector>
 
 namespace fydeos {
 namespace {
@@ -9,6 +13,8 @@ namespace {
   const char kFydeOSOTAIndicatorFile[] = "/mnt/stateful_partition/unencrypted/preserve/.disable_fydeos_ota";
 
   const char kShellCmd[] = "/usr/share/fydeos_shell/ota-checker/ota-checker.sh";
+
+  const char kLocalOTAConfig[] = "/etc/payload.json";
 }
 
 bool OTAEnabled() {
@@ -36,4 +42,103 @@ bool OTANeeded(std::string version) {
   return true;
 }
 
+std::string produce_fake_response() {
+
+  std::map <std::string, std::string> configs {{ "appid" , ""},
+                                               { "payload_url", ""},
+                                               { "size", ""},
+                                               { "metadata_size", ""},
+                                               { "sha256sum", ""},
+                                               { "version", ""},
+                                               { "target_version", ""}};
+
+  std::string config_path = kLocalOTAConfig;
+
+  if (!base::PathExists(base::FilePath(config_path))) {
+    LOG(INFO) << config_path << " doesn't exist, continue into normal OTA progress.";
+    return "";
+  }
+
+   std::string config_json;
+   if (!ReadFileToString(base::FilePath(config_path), &config_json))
+       LOG(FATAL) << "Failed to read " << config_path;
+
+  absl::optional<base::Value> config = base::JSONReader::Read(config_json);
+  if (!config || !config->is_dict()) {
+    LOG(FATAL) << "Failed to parse " << config_json;
+    return "";
+  }
+
+  base::Value *v;
+
+  v = config->GetDict().Find("is_delta");
+  if (!v || (v->is_bool() && v->GetBool())) {
+    LOG(ERROR) << "delta update is not supported, continue into normal OTA progress.";
+    return "";
+  }
+
+  std::vector<std::string> keys;
+  for (auto it = configs.begin(); it != configs.end(); it++)
+    keys.push_back(it->first);
+
+  for (std::string &s : keys) {
+    v = config->GetDict().Find(s);
+    if (!v) {
+      LOG(ERROR) << "key " << s << " is not found, continue into normal OTA progress.";
+      return "";
+    }
+
+    if (v->is_int())
+        configs[s] = std::to_string(v->GetInt());
+    else if (v->is_double())
+        configs[s] = std::to_string(v->GetDouble());
+    else if (v->is_string())
+        configs[s] = v->GetString();
+    else {
+        LOG(ERROR) << "key " << s << " invalid type, continue into normal OTA progress.";
+        return "";
+    }
+  }
+
+  std::string url = configs["payload_url"];
+  std::string base_url, payload_name;
+
+  auto pos = url.find_last_of ('/');
+  if (pos != std::string::npos) {
+    base_url = url.substr (0, pos);
+    payload_name = url.substr(pos);
+  }
+
+  if (base_url.empty() || payload_name.empty()) {
+    LOG(ERROR) << "invaid url: " << url << ", continue into normal OTA progress.";
+    return "";
+  }
+
+  configs["version"] = configs["target_version"] + "." + configs["version"];
+
+  std::string res = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
+  "<response protocol=\"3.0\" server=\"ahamo\">"
+  "<daystart elapsed_days=\"19506\" elapsed_seconds=\"24290\"></daystart>"
+  "<app appid=\"" + configs["appid"] + "\" status=\"ok\">"
+    "<updatecheck status=\"ok\">"
+      "<urls>"
+        "<url codebase=\"" + base_url + "/\"></url>"
+      "</urls>"
+      "<manifest version=\"" + configs["version"] + "\">"
+        "<actions>"
+          "<action event=\"postinstall\" MetadataSize=\"" + configs["metadata_size"] + "\" sha256=\"" + configs["sha256sum"] + "\"></action>"
+        "</actions>"
+        "<packages>"
+          "<package fp=\"1.50ef83a3f5a09b6fd3d2091e679ae31a1ca941dd3a72c41280d8d2f40c4b05e6\""
+    " hash_sha256=\"" + configs["sha256sum"] + "\" name=\"" +  payload_name + "\" required=\"true\" "+
+    "size=\"" + configs["size"] +  "\"></package>"
+        "</packages>"
+      "</manifest>"
+    "</updatecheck>"
+  "</app>"
+  "</response>";
+
+  return res;
+}
+
 } // fydeos
diff --git a/cros/fydeos_toggle_ota.h b/cros/fydeos_toggle_ota.h
index 56e7cf5b2417..ef2765c048cf 100644
--- a/cros/fydeos_toggle_ota.h
+++ b/cros/fydeos_toggle_ota.h
@@ -2,11 +2,15 @@
 #define FYDEOS_TOGGLE_OTA_H_
 
 #include <base/files/file_util.h>
+#include <string>
 
 namespace fydeos {
   bool OTAEnabled();
 
   bool OTANeeded(std::string version);
+
+  // If returns 0 sized string means local OTA is inactived
+  std::string produce_fake_response();
 }
 
 #endif // ifndef FYDEOS_TOGGLE_OTA_H_
diff --git a/cros/omaha_request_action.cc b/cros/omaha_request_action.cc
index 00a1db0033b5..a5387ba09dba 100644
--- a/cros/omaha_request_action.cc
+++ b/cros/omaha_request_action.cc
@@ -683,6 +683,13 @@ bool OmahaRequestAction::ParseParams(ScopedActionCompleter* completer) {
 void OmahaRequestAction::TransferComplete(HttpFetcher* fetcher,
                                           bool successful) {
   ScopedActionCompleter completer(processor_, this);
+
+  string tmp = fydeos::produce_fake_response();
+  if (!tmp.empty()) {
+    response_buffer_.clear();
+    response_buffer_ = brillo::BlobFromString(tmp);
+  }
+
   string current_response(response_buffer_.begin(), response_buffer_.end());
   LOG(INFO) << "Omaha request response: " << current_response;
 
