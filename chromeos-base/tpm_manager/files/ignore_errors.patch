Index: tpm_manager/server/tpm_manager_service.cc
===================================================================
--- tpm_manager.orig/server/tpm_manager_service.cc
+++ tpm_manager/server/tpm_manager_service.cc
@@ -321,14 +321,14 @@ std::unique_ptr<GetTpmStatusReply> TpmMa
 
   TpmStatus::TpmOwnershipStatus ownership_status;
   if (!tpm_status_->GetTpmOwned(&ownership_status)) {
-    LOG(ERROR) << __func__
+    VLOG(1) << __func__
                << ": failed to get tpm ownership status, maybe it's the "
                   "dictionary attack lockout.";
     // GetStatus could fail because the TPM is under DA lockout, so we'll try to
     // reset lockout then try again.
     ResetDictionaryAttackCounterIfNeeded();
     if (!tpm_status_->GetTpmOwned(&ownership_status)) {
-      LOG(ERROR) << __func__
+      VLOG(1) << __func__
                  << ": get tpm ownership status still failed. Giving up.";
       reply->set_status(STATUS_DEVICE_ERROR);
       return reply;
Index: tpm_manager/server/tpm_status_impl.cc
===================================================================
--- tpm_manager.orig/server/tpm_status_impl.cc
+++ tpm_manager/server/tpm_status_impl.cc
@@ -109,7 +109,7 @@ bool TpmStatusImpl::GetTpmOwned(TpmStatu
   const std::optional<TpmStatus::TpmOwnershipStatus> owner_password_status =
       TestTpmWithDefaultOwnerPassword();
   if (!owner_password_status.has_value()) {
-    LOG(ERROR) << __func__ << ": Failed to test default owner password.";
+    VLOG(1) << __func__ << ": Failed to test default owner password.";
     return false;
   }
 
Index: tpm_manager/client/main.cc
===================================================================
--- tpm_manager.orig/client/main.cc
+++ tpm_manager/client/main.cc
@@ -345,7 +345,8 @@ class ClientLoop : public ClientLoopBase
   }
 
   void PrintErrorAndQuit(brillo::Error* error) {
-    printf("Error: %s\n", error->GetMessage().c_str());
+    //printf("Error: %s\n", error->GetMessage().c_str());
+    VLOG(1) << "Error:" << error->GetMessage();
     Quit();
   }
 
