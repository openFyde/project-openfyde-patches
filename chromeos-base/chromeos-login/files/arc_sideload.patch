--- a/login_manager/arc_sideload_status.cc
+++ b/login_manager/arc_sideload_status.cc
@@ -28,7 +28,7 @@
 
 // Boot attribute used to track if the user has allowed sideloading on the
 // device.
-constexpr char kSideloadingAllowedBootAttribute[] = "arc_sideloading_allowed";
+//constexpr char kSideloadingAllowedBootAttribute[] = "arc_sideloading_allowed";
 
 // TODO(victorhsieh): switch to base::DoNothing() once libchrome is upreved.
 void DoNothing(ArcSideloadStatusInterface::Status, const char*) {}
@@ -46,6 +46,8 @@
   boot_lockbox_proxy_->WaitForServiceToBeAvailable(
       base::BindOnce(&ArcSideloadStatus::OnBootLockboxServiceAvailable,
                      weak_ptr_factory_.GetWeakPtr()));
+
+  OnBootLockboxServiceAvailable(true);
 }
 
 bool ArcSideloadStatus::IsAdbSideloadAllowed() {
@@ -64,7 +66,7 @@
   // that an interleaved call will be queued and handled when the transition is
   // finished. Otherwise, a QueryAdbSideload call (potentially from another
   // client) can return with a outdated cached result.
-
+/*
   dbus::MethodCall method_call(cryptohome::kBootLockboxInterface,
                                cryptohome::kBootLockboxStoreBootLockbox);
 
@@ -78,6 +80,9 @@
       &method_call, dbus::ObjectProxy::TIMEOUT_USE_DEFAULT,
       base::BindOnce(&ArcSideloadStatus::OnEnableAdbSideloadSet,
                      weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+*/
+  std::unique_ptr<dbus::Response> resp = dbus::Response::CreateEmpty();
+  OnEnableAdbSideloadSet(std::move(callback), resp.get());
 }
 
 void ArcSideloadStatus::QueryAdbSideload(QueryAdbSideloadCallback callback) {
@@ -104,6 +109,7 @@
 
 void ArcSideloadStatus::GetAdbSideloadAllowed(
     EnableAdbSideloadCallback callback) {
+  /*
   dbus::MethodCall method_call(cryptohome::kBootLockboxInterface,
                                cryptohome::kBootLockboxReadBootLockbox);
 
@@ -116,6 +122,9 @@
       &method_call, dbus::ObjectProxy::TIMEOUT_USE_DEFAULT,
       base::BindOnce(&ArcSideloadStatus::OnGotAdbSideloadAllowed,
                      weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+  */
+  std::unique_ptr<dbus::Response> resp = dbus::Response::CreateEmpty();
+  OnGotAdbSideloadAllowed(std::move(callback), resp.get());
 }
 
 ArcSideloadStatusInterface::Status ArcSideloadStatus::ParseResponseFromRead(
@@ -179,7 +188,7 @@
 
 void ArcSideloadStatus::OnGotAdbSideloadAllowed(
     EnableAdbSideloadCallback callback, dbus::Response* response) {
-  ArcSideloadStatusInterface::Status status = ParseResponseFromRead(response);
+  ArcSideloadStatusInterface::Status status = ArcSideloadStatusInterface::Status::ENABLED;
   SetAdbSideloadStatusAndNotify(status);
   std::move(callback).Run(status, nullptr);
 }
@@ -191,7 +200,7 @@
                             "result is null");
     return;
   }
-
+/*
   dbus::MessageReader reader(result);
   cryptohome::StoreBootLockboxReply reply;
   if (!reader.PopArrayOfBytesAsProto(&reply)) {
@@ -210,6 +219,7 @@
     }
     return;
   }
+ */
 
   // Callback later. Re-read setting from bootlockbox now that it has been
   // stored.
