Index: shill/cellular/cellular.cc
===================================================================
--- shill.orig/cellular/cellular.cc
+++ shill/cellular/cellular.cc
@@ -338,7 +338,8 @@ Cellular::~Cellular() {
 
 Network* Cellular::GetPrimaryNetwork() const {
   // The default network is considered as primary always.
-  return default_pdn_ ? default_pdn_->network() : nullptr;
+  return default_pdn_ ? default_pdn_->network() :
+    ppp_device_ ? ppp_device_->GetPrimaryNetwork() : nullptr;
 }
 
 std::string Cellular::GetLegacyEquipmentIdentifier() const {
@@ -3013,6 +3014,8 @@ void Cellular::StopPPP() {
     return;
   DropConnection();
   ppp_task_.reset();
+  manager()->DeregisterDevice(ppp_device_);
+  SetPrimaryMultiplexedInterface("");
   ppp_device_ = nullptr;
 }
 
@@ -3093,6 +3096,7 @@ void Cellular::OnPPPConnected(
     ppp_device_ = device_info->CreatePPPDevice(manager(), interface_name,
                                                interface_index);
     device_info->RegisterDevice(ppp_device_);
+    manager()->RegisterDevice(ppp_device_);
   }
 
   CHECK(service_);
@@ -3104,6 +3108,9 @@ void Cellular::OnPPPConnected(
   auto network_config = std::make_unique<net_base::NetworkConfig>(
       PPPDaemon::ParseNetworkConfig(params));
   ppp_device_->UpdateNetworkConfig(std::move(network_config));
+  SetPrimaryMultiplexedInterface(ppp_device_->GetPrimaryNetwork()->interface_name());
+  ResetServiceAttachedNetwork();
+  OnIPConfigsPropertyUpdated(ppp_device_->interface_index());
 }
 
 void Cellular::OnPPPDied(pid_t pid, int exit) {
Index: shill/device_info.cc
===================================================================
--- shill.orig/device_info.cc
+++ shill/device_info.cc
@@ -191,6 +191,8 @@ const char* const kModemDrivers[] = {
 // Path to the tun device.
 constexpr char kTunDeviceName[] = "/dev/net/tun";
 
+static constexpr std::string_view kPPPDevicePrefix = "ppp";
+
 // Time to wait before registering devices which need extra time to detect.
 constexpr base::TimeDelta kDelayedDeviceCreation = base::Seconds(5);
 
@@ -376,6 +378,9 @@ Technology DeviceInfo::GetDeviceTechnolo
     SLOG(2) << iface_name << ": device is kind '" << kind.value() << "'";
   }
 
+  if (iface_name.starts_with(kPPPDevicePrefix)) {
+    return Technology::kPPP;
+  }
   if (IsGuestDevice(iface_name)) {
     SLOG(2) << iface_name << ": device is a guest device";
     return Technology::kGuestInterface;
@@ -620,7 +625,7 @@ DeviceRefPtr DeviceInfo::CreateDevice(
     Technology technology) {
   SLOG(1) << __func__ << ": " << link_name << " MAC Address: "
           << (mac_address.has_value() ? mac_address->ToString() : "(null)")
-          << " Index: " << interface_index;
+          << " Index: " << interface_index << " Technology:" << technology;
 
   DeviceRefPtr device;
   delayed_devices_.erase(interface_index);
@@ -771,7 +776,6 @@ void DeviceInfo::AddLinkMsgHandler(const
       LOG(ERROR) << "Add Link message does not contain a link name!";
       return;
     }
-    SLOG(2) << "add link index " << dev_index << " name " << link_name;
     infos_[dev_index].name = link_name;
     indices_[link_name] = dev_index;
 
@@ -783,6 +787,7 @@ void DeviceInfo::AddLinkMsgHandler(const
       technology = GetDeviceTechnology(link_name, msg.link_status().kind);
     }
 
+    SLOG(2) << "add link index " << dev_index << " name " << link_name << " technology:" << technology;
     const auto mac_address =
         net_base::MacAddress::CreateFromBytes(msg.GetAttribute(IFLA_ADDRESS));
     if (mac_address) {
Index: shill/virtual_device.cc
===================================================================
--- shill.orig/virtual_device.cc
+++ shill/virtual_device.cc
@@ -64,6 +64,7 @@ void VirtualDevice::UpdateNetworkConfig(
           manager()->GetPortalDetectorProbingConfiguration(),
       .validation_mode = NetworkMonitor::ValidationMode::kDisabled,
   });
+  OnIPConfigsPropertyUpdated(interface_index());
 }
 
 void VirtualDevice::ResetConnection() {
