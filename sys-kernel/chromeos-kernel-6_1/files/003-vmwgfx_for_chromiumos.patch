Index: kernel-6_1/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
===================================================================
--- kernel-6_1.orig/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
+++ kernel-6_1/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
@@ -1320,15 +1320,17 @@ static int vmw_kms_new_framebuffer_surfa
 	if (!drm_any_plane_has_format(&dev_priv->drm,
 				      mode_cmd->pixel_format,
 				      mode_cmd->modifier[0])) {
-		drm_dbg(&dev_priv->drm,
+		drm_err(&dev_priv->drm,
 			"unsupported pixel format %p4cc / modifier 0x%llx\n",
 			&mode_cmd->pixel_format, mode_cmd->modifier[0]);
 		return -EINVAL;
 	}
 
 	/* Surface must be marked as a scanout. */
-	if (unlikely(!surface->metadata.scanout))
+	if (unlikely(!surface->metadata.scanout)) {
+    DRM_ERROR("no scanout format: %p4cc\n",  &mode_cmd->pixel_format);
 		return -EINVAL;
+  }
 
 	if (unlikely(surface->metadata.mip_levels[0] != 1 ||
 		     surface->metadata.num_sizes != 1 ||
@@ -1342,11 +1344,15 @@ static int vmw_kms_new_framebuffer_surfa
 
 	switch (mode_cmd->pixel_format) {
 	case DRM_FORMAT_ARGB8888:
-		format = SVGA3D_A8R8G8B8;
+		format = SVGA3D_B8G8R8A8_UNORM;
 		break;
 	case DRM_FORMAT_XRGB8888:
-		format = SVGA3D_X8R8G8B8;
+  case DRM_FORMAT_XBGR8888:
+		format = SVGA3D_B8G8R8X8_UNORM;
 		break;
+  case DRM_FORMAT_ABGR8888:
+    format = SVGA3D_R8G8B8A8_UNORM;
+    break;
 	case DRM_FORMAT_RGB565:
 		format = SVGA3D_R5G6B5;
 		break;
@@ -1383,8 +1389,10 @@ static int vmw_kms_new_framebuffer_surfa
 
 	ret = drm_framebuffer_init(dev, &vfbs->base.base,
 				   &vmw_framebuffer_surface_funcs);
-	if (ret)
+	if (ret) {
+    DRM_ERROR(" drm_framebuffer_init failed, ret:%d\n", ret);
 		goto out_err2;
+  }
 
 	return 0;
 
@@ -1577,11 +1585,18 @@ static int vmw_create_bo_proxy(struct dr
 
 	switch (mode_cmd->pixel_format) {
 	case DRM_FORMAT_ARGB8888:
+	  format = SVGA3D_B8G8R8A8_UNORM;
+		bytes_pp = 4;
+		break;
 	case DRM_FORMAT_XRGB8888:
-		format = SVGA3D_X8R8G8B8;
+  case DRM_FORMAT_XBGR8888:
+		format = SVGA3D_B8G8R8X8_UNORM;
 		bytes_pp = 4;
 		break;
-
+	case DRM_FORMAT_ABGR8888:
+    format = SVGA3D_R8G8B8A8_UNORM;
+    bytes_pp = 4;
+    break;
 	case DRM_FORMAT_RGB565:
 	case DRM_FORMAT_XRGB1555:
 		format = SVGA3D_R5G6B5;
@@ -1738,9 +1753,10 @@ vmw_kms_new_framebuffer(struct vmw_priva
 	    dev_priv->active_display_unit == vmw_du_screen_target) {
 		ret = vmw_create_bo_proxy(&dev_priv->drm, mode_cmd,
 					  bo, &surface);
-		if (ret)
+		if (ret) {
+      DRM_ERROR("vmw_create_bo_proxy failed, ret:%d\n", ret);
 			return ERR_PTR(ret);
-
+    }
 		is_bo_proxy = true;
 	}
 
@@ -1762,8 +1778,10 @@ vmw_kms_new_framebuffer(struct vmw_priva
 		BUG();
 	}
 
-	if (ret)
+	if (ret) {
+    DRM_ERROR("vmw_kms_new_framebuffer_bo ret:%d\n", ret);
 		return ERR_PTR(ret);
+  }
 
 	vfb->pin = vmw_framebuffer_pin;
 	vfb->unpin = vmw_framebuffer_unpin;
Index: kernel-6_1/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
===================================================================
--- kernel-6_1.orig/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
+++ kernel-6_1/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
@@ -250,6 +250,8 @@ static const uint32_t __maybe_unused vmw
 	DRM_FORMAT_RGB565,
 	DRM_FORMAT_XRGB8888,
 	DRM_FORMAT_ARGB8888,
+	DRM_FORMAT_ABGR8888,
+  DRM_FORMAT_XBGR8888,
 };
 
 static const uint32_t __maybe_unused vmw_cursor_plane_formats[] = {
Index: kernel-6_1/arch/x86/kvm/Kconfig
===================================================================
--- kernel-6_1.orig/arch/x86/kvm/Kconfig
+++ kernel-6_1/arch/x86/kvm/Kconfig
@@ -87,6 +87,15 @@ config KVM_INTEL
 	  To compile this as a module, choose M here: the module
 	  will be called kvm-intel.
 
+config KVM_INVEPT_GLOBAL
+	bool "Always use global context for INVEPT"
+	default n
+	depends on KVM_INTEL
+	help
+		Always use global context for INVEPT, to workaround b/188008861.
+
+		If unsure, say N.
+
 config X86_SGX_KVM
 	bool "Software Guard eXtensions (SGX) Virtualization"
 	depends on X86_SGX && KVM_INTEL
Index: kernel-6_1/arch/x86/kvm/vmx/vmx_ops.h
===================================================================
--- kernel-6_1.orig/arch/x86/kvm/vmx/vmx_ops.h
+++ kernel-6_1/arch/x86/kvm/vmx/vmx_ops.h
@@ -338,9 +338,11 @@ static inline void ept_sync_global(void)
 
 static inline void ept_sync_context(u64 eptp)
 {
+#ifndef CONFIG_KVM_INVEPT_GLOBAL
 	if (cpu_has_vmx_invept_context())
 		__invept(VMX_EPT_EXTENT_CONTEXT, eptp, 0);
 	else
+#endif
 		ept_sync_global();
 }
 
