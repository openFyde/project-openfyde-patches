--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -46,6 +46,7 @@
 #define RESOLUTION_LOC		1
 #define MAX_CONTACTS_LOC	5
 #define TRIGGER_LOC		6
+#define GOODIX_DEFAULT_MAX_PRESSURE 1024
 
 /* Our special handling for GPIO accesses through ACPI is x86 specific */
 #if defined CONFIG_X86 && defined CONFIG_ACPI
@@ -283,34 +284,58 @@
 	return -ENOMSG;
 }
 
-static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data)
+static void googdix_ts_report_pen(struct input_dev *dev, int x, int y, int w, u8 key_value) {
+	input_report_abs(dev, ABS_X, x);
+	input_report_abs(dev, ABS_Y, y);
+	input_report_abs(dev, ABS_PRESSURE, w);
+	input_report_key(dev, BTN_TOOL_PEN, w > 50);
+	input_report_key(dev, BTN_TOUCH, w > 80);
+	input_report_key(dev, BTN_STYLUS, key_value == 0x91);
+	input_sync(dev);
+}
+
+static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[0] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[1]);
 	int input_y = get_unaligned_le16(&coor_data[3]);
 	int input_w = get_unaligned_le16(&coor_data[5]);
 
+	if (coor_data[0] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
+	input_mt_sync_frame(ts->input_dev);
+	input_sync(ts->input_dev);
 }
 
-static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data)
+static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[1] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[3]);
 	int input_y = get_unaligned_le16(&coor_data[5]);
 	int input_w = get_unaligned_le16(&coor_data[7]);
 
+	if (coor_data[1] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
+	input_mt_sync_frame(ts->input_dev);
+	input_sync(ts->input_dev);
 }
 
 static void goodix_ts_report_key(struct goodix_ts_data *ts, u8 *data)
@@ -355,13 +380,10 @@
 	for (i = 0; i < touch_num; i++)
 		if (ts->contact_size == 9)
 			goodix_ts_report_touch_9b(ts,
-				&point_data[1 + ts->contact_size * i]);
+				&point_data[1 + ts->contact_size * i], point_data[0]);
 		else
 			goodix_ts_report_touch_8b(ts,
-				&point_data[1 + ts->contact_size * i]);
-
-	input_mt_sync_frame(ts->input_dev);
-	input_sync(ts->input_dev);
+				&point_data[1 + ts->contact_size * i], point_data[0]);
 }
 
 /**
@@ -988,6 +1010,29 @@
 	return error;
 }
 
+static int goodix_request_pen_dev(struct goodix_ts_data *ts) {
+	struct input_dev *dev;
+	ts->pen_dev = devm_input_allocate_device(&ts->client->dev);
+	dev = ts->pen_dev;
+	input_set_capability(dev, EV_KEY, BTN_TOUCH);
+	input_set_capability(dev, EV_KEY, BTN_TOOL_PEN);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS2);
+	__set_bit(INPUT_PROP_DIRECT, dev->propbit);
+
+	input_set_abs_params(dev, ABS_X, 0, ts->prop.max_x, 0, 0);
+	input_set_abs_params(dev, ABS_Y, 0, ts->prop.max_y, 0, 0);
+	input_set_abs_params(dev,  ABS_PRESSURE, 0,
+			     GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
+	dev->name = "Goodix Capacitive Pen";
+	dev->phys = "input/ts";
+	dev->id.bustype = BUS_I2C;
+	if (kstrtou16(ts->id, 10, &dev->id.product))
+		dev->id.vendor = 0x0416;
+	dev->id.version = ts->version;
+	return input_register_device(dev);
+}
+
 /**
  * goodix_configure_dev - Finish device initialization
  *
@@ -1034,10 +1079,14 @@
 		input_set_capability(ts->input_dev, EV_KEY, ts->keymap[i]);
 	}
 
+	ts->input_dev->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY)
+		| BIT_MASK(EV_ABS);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_X);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_Y);
 	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
 	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_PRESSURE, 0,
+			     GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
 
 	/* Read configuration and apply touchscreen parameters */
 	goodix_read_config(ts);
@@ -1093,7 +1142,7 @@
 		return error;
 	}
 
-	return 0;
+	return goodix_request_pen_dev(ts);
 }
 
 /**
--- a/drivers/input/touchscreen/goodix.h
+++ b/drivers/input/touchscreen/goodix.h
@@ -41,6 +41,7 @@
 struct goodix_ts_data {
 	struct i2c_client *client;
 	struct input_dev *input_dev;
+	struct input_dev *pen_dev;
 	const struct goodix_chip_data *chip;
 	struct touchscreen_properties prop;
 	unsigned int max_touch_num;
