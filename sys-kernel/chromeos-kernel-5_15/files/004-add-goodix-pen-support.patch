Index: kernel-5_15/drivers/input/touchscreen/goodix.c
===================================================================
--- kernel-5_15.orig/drivers/input/touchscreen/goodix.c
+++ kernel-5_15/drivers/input/touchscreen/goodix.c
@@ -46,6 +46,7 @@
 #define RESOLUTION_LOC		1
 #define MAX_CONTACTS_LOC	5
 #define TRIGGER_LOC		6
+#define GOODIX_DEFAULT_MAX_PRESSURE 1024
 
 /* Our special handling for GPIO accesses through ACPI is x86 specific */
 #if defined CONFIG_X86 && defined CONFIG_ACPI
@@ -291,34 +292,58 @@ static int goodix_ts_read_input_report(s
 	return -ENOMSG;
 }
 
-static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data)
+static void googdix_ts_report_pen(struct input_dev *dev, int x, int y, int w, u8 key_value) {
+	input_report_abs(dev, ABS_X, x);
+	input_report_abs(dev, ABS_Y, y);
+	input_report_abs(dev, ABS_PRESSURE, w);
+	input_report_key(dev, BTN_TOOL_PEN, w > 50);
+	input_report_key(dev, BTN_TOUCH, w > 80);
+	input_report_key(dev, BTN_STYLUS, key_value == 0x91);
+	input_sync(dev);
+}
+
+static int goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[0] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[1]);
 	int input_y = get_unaligned_le16(&coor_data[3]);
 	int input_w = get_unaligned_le16(&coor_data[5]);
 
+	if (coor_data[0] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return -1;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
+  return id;
 }
 
-static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data)
+static int goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[1] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[3]);
 	int input_y = get_unaligned_le16(&coor_data[5]);
 	int input_w = get_unaligned_le16(&coor_data[7]);
 
+	if (coor_data[1] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return -1;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
+	input_mt_sync_frame(ts->input_dev);
+	input_sync(ts->input_dev);
+  return id;
 }
 
 static void goodix_ts_report_key(struct goodix_ts_data *ts, u8 *data)
@@ -350,9 +375,11 @@ static void goodix_ts_report_key(struct
  */
 static void goodix_process_events(struct goodix_ts_data *ts)
 {
-	u8  point_data[2 + GOODIX_MAX_CONTACT_SIZE * GOODIX_MAX_CONTACTS];
+	u8  point_data[2 + GOODIX_MAX_CONTACT_SIZE * GOODIX_MAX_CONTACTS] = { 0 };
 	int touch_num;
 	int i;
+  bool reported[GOODIX_MAX_CONTACTS] = { 0 };
+  int reported_slot;
 
 	touch_num = goodix_ts_read_input_report(ts, point_data);
 	if (touch_num < 0)
@@ -360,16 +387,24 @@ static void goodix_process_events(struct
 
 	goodix_ts_report_key(ts, point_data);
 
-	for (i = 0; i < touch_num; i++)
-		if (ts->contact_size == 9)
-			goodix_ts_report_touch_9b(ts,
-				&point_data[1 + ts->contact_size * i]);
-		else
-			goodix_ts_report_touch_8b(ts,
-				&point_data[1 + ts->contact_size * i]);
-
-	input_mt_sync_frame(ts->input_dev);
-	input_sync(ts->input_dev);
+	for (i = 0; i < touch_num; i++) {
+		if (ts->contact_size == 9) {
+			reported_slot = goodix_ts_report_touch_9b(ts,
+				&point_data[1 + ts->contact_size * i], point_data[0]);
+		} else {
+			reported_slot = goodix_ts_report_touch_8b(ts,
+				&point_data[1 + ts->contact_size * i], point_data[0]);
+    }
+    if (reported_slot > -1)
+      reported[reported_slot] = true;
+  }
+  for (i = 0; i < GOODIX_MAX_CONTACTS; i++)
+    if (!reported[i]) {
+      input_mt_slot(ts->input_dev, i);
+      input_mt_report_slot_inactive(ts->input_dev);
+    }
+  input_mt_sync_frame(ts->input_dev);
+  input_sync(ts->input_dev);
 }
 
 /**
@@ -1015,6 +1050,29 @@ static int goodix_i2c_test(struct i2c_cl
 	return error;
 }
 
+static int goodix_request_pen_dev(struct goodix_ts_data *ts) {
+	struct input_dev *dev;
+	ts->pen_dev = devm_input_allocate_device(&ts->client->dev);
+	dev = ts->pen_dev;
+	input_set_capability(dev, EV_KEY, BTN_TOUCH);
+	input_set_capability(dev, EV_KEY, BTN_TOOL_PEN);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS2);
+	__set_bit(INPUT_PROP_DIRECT, dev->propbit);
+
+	input_set_abs_params(dev, ABS_X, 0, ts->prop.max_x, 0, 0);
+	input_set_abs_params(dev, ABS_Y, 0, ts->prop.max_y, 0, 0);
+	input_set_abs_params(dev,  ABS_PRESSURE, 0,
+			     GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
+	dev->name = "Goodix Capacitive Pen";
+	dev->phys = "input/ts";
+	dev->id.bustype = BUS_I2C;
+	if (kstrtou16(ts->id, 10, &dev->id.product))
+		dev->id.vendor = 0x0416;
+	dev->id.version = ts->version;
+	return input_register_device(dev);
+}
+
 /**
  * goodix_configure_dev - Finish device initialization
  *
@@ -1061,10 +1119,14 @@ static int goodix_configure_dev(struct g
 		input_set_capability(ts->input_dev, EV_KEY, ts->keymap[i]);
 	}
 
+	ts->input_dev->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY)
+		| BIT_MASK(EV_ABS);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_X);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_Y);
 	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
 	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_PRESSURE, 0,
+			     GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
 
 retry_read_config:
 	/* Read configuration and apply touchscreen parameters */
@@ -1131,7 +1193,7 @@ retry_read_config:
 		return error;
 	}
 
-	return 0;
+	return goodix_request_pen_dev(ts);
 }
 
 /**
Index: kernel-5_15/drivers/input/touchscreen/goodix.h
===================================================================
--- kernel-5_15.orig/drivers/input/touchscreen/goodix.h
+++ kernel-5_15/drivers/input/touchscreen/goodix.h
@@ -41,6 +41,7 @@ struct goodix_chip_data {
 struct goodix_ts_data {
 	struct i2c_client *client;
 	struct input_dev *input_dev;
+	struct input_dev *pen_dev;
 	const struct goodix_chip_data *chip;
 	struct touchscreen_properties prop;
 	unsigned int max_touch_num;
