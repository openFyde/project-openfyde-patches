Index: kernel-6_6/security/selinux/hooks.c
===================================================================
--- kernel-6_6.orig/security/selinux/hooks.c
+++ kernel-6_6/security/selinux/hooks.c
@@ -103,6 +103,9 @@
 #include "netlabel.h"
 #include "audit.h"
 #include "avc_ss.h"
+#ifdef CONFIG_OVERLAY_FS
+#include "../../fs/overlayfs/overlayfs.h"
+#endif
 
 #define SELINUX_INODE_INIT_XATTRS 1
 
@@ -465,10 +468,31 @@ static int selinux_is_genfs_special_hand
 		  !strcmp(sb->s_type->name, "cgroup2")));
 }
 
+static bool is_overlay_sb(struct super_block *sb)
+{
+	const char* fstype = sb->s_type->name;
+	return strcmp(fstype, "overlay") == 0;
+}
+
+static bool is_overlay_inode(struct inode *inode)
+{
+	return is_overlay_sb(inode->i_sb);
+}
+
+#ifdef CONFIG_OVERLAY_FS
+static struct inode *get_real_inode_from_ovl(struct inode *inode) {
+
+	return ovl_inode_real(inode);
+}
+#endif
+
 static int selinux_is_sblabel_mnt(struct super_block *sb)
 {
 	struct superblock_security_struct *sbsec = selinux_superblock(sb);
-
+#ifdef CONFIG_OVERLAY_FS
+ if(is_overlay_sb(sb))
+   return 1;
+#endif
 	/*
 	 * IMPORTANT: Double-check logic in this function when adding a new
 	 * SECURITY_FS_USE_* definition!
@@ -3433,7 +3457,15 @@ static int selinux_inode_getsecurity(str
 	 * and lack of permission just means that we fall back to the
 	 * in-core context value, not a denial.
 	 */
-	isec = inode_security(inode);
+	if (is_overlay_inode(inode)) {
+#ifdef CONFIG_OVERLAY_FS
+		isec = inode_security(get_real_inode_from_ovl(inode));
+#else
+		isec = inode_security(inode);
+#endif
+	}else {
+		isec = inode_security(inode);
+	}
 	if (has_cap_mac_admin(false))
 		error = security_sid_to_context_force(isec->sid, &context,
 						      &size);
