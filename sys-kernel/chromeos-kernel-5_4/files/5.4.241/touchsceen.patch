diff --git a/drivers/input/touchscreen/goodix.c b/drivers/input/touchscreen/goodix.c
index bfb945fc33a1..75d296783449 100644
--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -29,6 +29,15 @@
 #include <linux/of.h>
 #include <asm/unaligned.h>
 
+bool force_nine_bytes = false;
+module_param(force_nine_bytes, bool, 0644);
+
+bool force_invert_x = false;
+module_param(force_invert_x, bool, 0644);
+
+bool force_invert_y = false;
+module_param(force_invert_y, bool, 0644);
+
 struct goodix_ts_data;
 
 struct goodix_chip_data {
@@ -40,6 +49,7 @@ struct goodix_chip_data {
 struct goodix_ts_data {
 	struct i2c_client *client;
 	struct input_dev *input_dev;
+  struct input_dev *pen_dev;
 	const struct goodix_chip_data *chip;
 	struct touchscreen_properties prop;
 	unsigned int max_touch_num;
@@ -85,6 +95,7 @@ struct goodix_ts_data {
 #define RESOLUTION_LOC		1
 #define MAX_CONTACTS_LOC	5
 #define TRIGGER_LOC		6
+#define GOODIX_DEFAULT_MAX_PRESSURE 1024
 
 static int goodix_check_cfg_8(struct goodix_ts_data *ts,
 			const struct firmware *cfg);
@@ -338,34 +349,62 @@ static int goodix_ts_read_input_report(struct goodix_ts_data *ts, u8 *data)
 	return 0;
 }
 
-static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data)
+static void googdix_ts_report_pen(struct input_dev *dev, int x, int y, int w, u8 key_value) {
+	input_report_abs(dev, ABS_X, x);
+	input_report_abs(dev, ABS_Y, y);
+	input_report_abs(dev, ABS_PRESSURE, w);
+	input_report_key(dev, BTN_TOOL_PEN, w > 50);
+	input_report_key(dev, BTN_TOUCH, w > 80);
+	input_report_key(dev, BTN_STYLUS, key_value == 0x91);
+	input_sync(dev);
+}
+
+static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[0] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[1]);
 	int input_y = get_unaligned_le16(&coor_data[3]);
 	int input_w = get_unaligned_le16(&coor_data[5]);
 
+	if (coor_data[0] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
 }
 
-static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data)
+static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[1] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[3]);
 	int input_y = get_unaligned_le16(&coor_data[5]);
 	int input_w = get_unaligned_le16(&coor_data[7]);
 
+	if (coor_data[1] & 0x80) {
+		googdix_ts_report_pen(ts->pen_dev, input_x, input_y, input_w, key_value);
+		return;
+	}
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	input_report_abs(ts->input_dev, ABS_MT_PRESSURE, input_w);
+}
+
+static void goodix_ts_report_no_touch(struct goodix_ts_data *ts) {
+	int i;
+	for (i = 0; i < ts->max_touch_num; i++) {
+		input_mt_slot(ts->input_dev, i);
+		input_report_abs(ts->input_dev, ABS_MT_TRACKING_ID, -1);
+	}
 }
 
 /**
@@ -383,6 +422,9 @@ static void goodix_process_events(struct goodix_ts_data *ts)
 	int i;
 
 	touch_num = goodix_ts_read_input_report(ts, point_data);
+	/*
+	  dev_info(&ts->client->dev, "touch count:%d\n",touch_num);
+	*/
 	if (touch_num < 0)
 		return;
 
@@ -392,14 +434,17 @@ static void goodix_process_events(struct goodix_ts_data *ts)
 	 */
 	input_report_key(ts->input_dev, KEY_LEFTMETA, point_data[0] & BIT(4));
 
-	for (i = 0; i < touch_num; i++)
-		if (ts->contact_size == 9)
-			goodix_ts_report_touch_9b(ts,
-				&point_data[1 + ts->contact_size * i]);
-		else
-			goodix_ts_report_touch_8b(ts,
-				&point_data[1 + ts->contact_size * i]);
-
+	if (touch_num == 0){
+		goodix_ts_report_no_touch(ts);
+	} else {
+		for (i = 0; i < touch_num; i++)
+			if (ts->contact_size == 9)
+				goodix_ts_report_touch_9b(ts,
+							&point_data[1 + ts->contact_size * i], point_data[0]);
+			else
+				goodix_ts_report_touch_8b(ts,
+							&point_data[1 + ts->contact_size * i], point_data[0]);
+	}
 	input_mt_sync_frame(ts->input_dev);
 	input_sync(ts->input_dev);
 }
@@ -737,6 +782,29 @@ static int goodix_i2c_test(struct i2c_client *client)
 	return error;
 }
 
+static int goodix_request_pen_dev(struct goodix_ts_data *ts) {
+	struct input_dev *dev;
+	ts->pen_dev = devm_input_allocate_device(&ts->client->dev);
+	dev = ts->pen_dev;
+	input_set_capability(dev, EV_KEY, BTN_TOUCH);
+	input_set_capability(dev, EV_KEY, BTN_TOOL_PEN);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS);
+	input_set_capability(dev, EV_KEY, BTN_STYLUS2);
+	__set_bit(INPUT_PROP_DIRECT, dev->propbit);
+
+	input_set_abs_params(dev, ABS_X, 0, ts->prop.max_x, 0, 0);
+	input_set_abs_params(dev, ABS_Y, 0, ts->prop.max_y, 0, 0);
+	input_set_abs_params(dev,  ABS_PRESSURE, 0,
+			GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
+	dev->name = "Goodix Capacitive Pen";
+	dev->phys = "input/ts";
+	dev->id.bustype = BUS_I2C;
+	dev->id.vendor = 0x0416;
+	dev->id.product = ts->id;
+	dev->id.version = ts->version;
+	return input_register_device(dev);
+}
+
 /**
  * goodix_configure_dev - Finish device initialization
  *
@@ -770,10 +838,14 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 	/* Capacitive Windows/Home button on some devices */
 	input_set_capability(ts->input_dev, EV_KEY, KEY_LEFTMETA);
 
+	ts->input_dev->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY)
+		| BIT_MASK(EV_ABS);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_X);
 	input_set_capability(ts->input_dev, EV_ABS, ABS_MT_POSITION_Y);
 	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
 	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_PRESSURE, 0,
+			GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
 
 	/* Read configuration and apply touchscreen parameters */
 	goodix_read_config(ts);
@@ -808,12 +880,18 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 			"Non-standard 9-bytes report format quirk\n");
 	}
 
-	if (dmi_check_system(inverted_x_screen)) {
+	if (force_nine_bytes)
+		ts->contact_size = 9;
+
+	if (dmi_check_system(inverted_x_screen) || force_invert_x) {
 		ts->prop.invert_x = true;
 		dev_dbg(&ts->client->dev,
 			"Applying 'inverted x screen' quirk\n");
 	}
 
+	if (force_invert_y)
+		ts->prop.invert_y = true;
+
 	error = input_mt_init_slots(ts->input_dev, ts->max_touch_num,
 				    INPUT_MT_DIRECT | INPUT_MT_DROP_UNUSED);
 	if (error) {
@@ -836,7 +914,7 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 		return error;
 	}
 
-	return 0;
+	return goodix_request_pen_dev(ts);
 }
 
 /**
